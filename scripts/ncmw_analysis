#!/usr/bin/env python

import hydra
from omegaconf import DictConfig, OmegaConf

import logging
import socket
import importlib

import time

import random
import numpy as np
import pandas as pd
import json

import sys, os

file_dir = os.path.dirname(os.path.dirname(__file__))
sys.path.append(file_dir)


from ncmw.analysis import (
    compute_fvas,
    jaccard_similarity_matrices,
    compute_COMPM,
    table_ex_transport,
    sekretion_uptake_fva,
    sekretion_uptake_fba,
    compute_uptake_sekretion_table,
)
from ncmw.visualization import (
    plot_full_fva,
    plot_medium_fva_range,
    jacard_index_similarity_heatmap,
    plot_scaled_medium_growth,
    uptake_sekretion_venn_diagrams,
)

from ncmw.utils import (
    get_models,
    get_result_path,
    SEPERATOR,
    save_model,
    get_model_paths,
)


@hydra.main(config_path="../data/hydra", config_name="config.yaml")
def run_analysis(cfg: DictConfig) -> None:
    log = logging.getLogger(__name__)
    log.info(OmegaConf.to_yaml(cfg))
    log.info(f"Hostname: {socket.gethostname()}")

    seed = cfg.seed
    random.seed(seed)
    np.random.seed(seed)
    log.info(f"Random seed: {seed}")

    start_time = time.time()
    name = cfg.name

    PATH_res = get_result_path(name)
    PATH = PATH_res + SEPERATOR + "analysis"
    log.info(f"Working directory: {PATH}")

    try:
        if not os.path.exists(PATH_res):
            os.mkdir(PATH_res)
        if not os.path.exists(PATH):
            os.mkdir(PATH)
        if not os.path.exists(PATH + SEPERATOR + "medium"):
            os.mkdir(PATH + SEPERATOR + "medium")
        if not os.path.exists(PATH + SEPERATOR + "growth"):
            os.mkdir(PATH + SEPERATOR + "growth")
        if not os.path.exists(PATH + SEPERATOR + "flux_analysis"):
            os.mkdir(PATH + SEPERATOR + "flux_analysis")
        if not os.path.exists(PATH + SEPERATOR + "similarity"):
            os.mkdir(PATH + SEPERATOR + "similarity")
        if not os.path.exists(PATH + SEPERATOR + "sekretion_uptake"):
            os.mkdir(PATH + SEPERATOR + "sekretion_uptake")
    except:
        pass

    log.info("Loading models")
    models = get_models(
        "snm3_models", prefix=PATH_res + SEPERATOR + "setup" + SEPERATOR
    )

    log.info("Generating fva results")
    dfs = compute_fvas(models, cfg.analysis.fva_fraction)
    for model, df in zip(models, dfs):
        sol = model.optimize()
        df["flux"] = sol.fluxes
        df.to_csv(
            PATH + SEPERATOR + "flux_analysis" + SEPERATOR + "fva_" + model.id + ".csv"
        )
        log.info(df)

    log.info("Computing COMPM media for modles")
    mediums = compute_COMPM(models, dfs)
    for model, medium in zip(models, mediums):
        with open(
            PATH + SEPERATOR + "medium" + SEPERATOR + "COMPM_" + model.id + ".json", "w"
        ) as f:
            json.dump(medium, f)

    log.info("Plotting fva results")
    for model, df in zip(models, dfs):
        plot_full_fva(
            df,
            PATH
            + SEPERATOR
            + "flux_analysis"
            + SEPERATOR
            + "full_fva_plot"
            + model.id
            + ".pdf",
        )
        plot_medium_fva_range(
            model,
            PATH
            + SEPERATOR
            + "flux_analysis"
            + SEPERATOR
            + "medium_fva_plot"
            + model.id
            + ".pdf",
            cfg.analysis.fva_fraction,
        )

    log.info("Computing Uptake Sekretions + Transports")
    uptakes = []
    sekretions = []
    for i, model in enumerate(models):
        # Transport reactions
        transport_check = table_ex_transport(model)
        transport_check.to_csv(
            PATH
            + SEPERATOR
            + "sekretion_uptake"
            + SEPERATOR
            + model.id
            + "_transport_summary.csv"
        )

        # Sekretion uptakes
        PATH + SEPERATOR + "sekretion_uptake"
        if cfg.analysis.sekretion_uptake == "fva":
            uptake, sekretion = sekretion_uptake_fva(dfs[i])
        else:
            uptake, sekretion = sekretion_uptake_fba(model)
        uptakes.append(uptake)
        sekretions.append(sekretion)

    for i in range(len(models)):
        for j in range(i + 1, len(models)):
            uptake_sekretion_table = compute_uptake_sekretion_table(
                models[i].id,
                models[j].id,
                uptakes[i],
                uptakes[j],
                sekretions[i],
                sekretions[j],
            )
            uptake_sekretion_table.to_csv(
                PATH
                + SEPERATOR
                + "sekretion_uptake"
                + SEPERATOR
                + f"{models[i].id}_{models[j].id}_uptake_sekretion_summary.csv"
            )

    fig = uptake_sekretion_venn_diagrams(
        models,
        uptakes,
        sekretions,
        names=cfg.visualization.names,
        cmap=cfg.visualization.cmap,
    )
    fig.savefig(
        PATH
        + SEPERATOR
        + "sekretion_uptake"
        + SEPERATOR
        + "uptake_sekretion_overlap_plot.pdf"
    )

    log.info("Computing Jacard Similarities")
    df_met, df_rec, df_ro = jaccard_similarity_matrices(models)
    df_met.to_csv(
        PATH
        + SEPERATOR
        + "similarity"
        + SEPERATOR
        + "jacard_similarities_metabolies.csv"
    )
    df_rec.to_csv(
        PATH
        + SEPERATOR
        + "similarity"
        + SEPERATOR
        + "jacard_similarities_reactions.csv"
    )
    df_ro.to_csv(
        PATH
        + SEPERATOR
        + "similarity"
        + SEPERATOR
        + "jacard_similarities_exchanges.csv"
    )
    fig = jacard_index_similarity_heatmap(df_met, df_rec, df_ro, names = cfg.visualization.names)
    fig.savefig(PATH + SEPERATOR + "similarity" + SEPERATOR + "similarity_summary.pdf")

    log.info("Computing scaled medium growth plot")
    kwargs = cfg.visualization.scaled_medium_growth_plot
    fig = plot_scaled_medium_growth(
        models,
        kwargs.min_scale,
        kwargs.max_scale,
        kwargs.evaluations,
        names=cfg.visualization.names,
        cmap=cfg.visualization.cmap,
    )
    fig.savefig(
        PATH + SEPERATOR + "growth" + SEPERATOR + "scaled_medium_growth_plot.pdf"
    )

    end_time = time.time()
    log.info(f"Job finished in {end_time-start_time} seconds")


if __name__ == "__main__":
    run_analysis()
