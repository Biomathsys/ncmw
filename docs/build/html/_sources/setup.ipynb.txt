{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setup\n",
    "\n",
    "This notebook shows a small example on what the model setup can do. We will demonstrate this on five metabolic models of Moraxella, H. Influenza, S. aureus, S. epidermidis and D. pigrum. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ncmw.utils import get_models\n",
    "from ncmw.setup_models import set_default_configs_and_snm3_medium, create_consistent_model, gapfill_medium, gapfill_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "models = get_models(\"models\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Growth CarveMe_SNM_gapfilled_model: 0.7022727466098068\n",
      "Growth himodel: 63.919604406865695\n",
      "Growth Staphylococcus_epidermidis_ATCC_12228: 0.5746259500792624\n",
      "Growth DP_83VPs_KB5: 0.282365392532248\n",
      "Growth iYS854: 1.360224986987768\n"
     ]
    }
   ],
   "source": [
    "for model in models:\n",
    "    print(f\"Growth {model.id}: {model.slim_optimize()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cleaning the model\n",
    "\n",
    "There are typically several blocked reactions or mass charge violations within a metabolic model. Thus before continueing we remove these e.g. using the FastCC algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "consistent_models =[]\n",
    "reports = []\n",
    "for model in models:\n",
    "    consistent_model, report = create_consistent_model(model)\n",
    "    consistent_models.append(consistent_model)\n",
    "    reports.append(report)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Blocked reactions</th>\n",
       "      <th>Metabolite formula problems</th>\n",
       "      <th>Mass charge balance violations</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Original Model</th>\n",
       "      <td>246</td>\n",
       "      <td>0</td>\n",
       "      <td>122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Consistent model</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>117</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Blocked reactions  Metabolite formula problems  \\\n",
       "Original Model                  246                            0   \n",
       "Consistent model                  0                            0   \n",
       "\n",
       "                  Mass charge balance violations  \n",
       "Original Model                               122  \n",
       "Consistent model                             117  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reports[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Growth CarveMe_SNM_gapfilled_model_consistent: 0.7022727466097843\n",
      "Growth himodel_consistent: 63.919604406865524\n",
      "Growth Staphylococcus_epidermidis_ATCC_12228_consistent: 0.574625950079267\n",
      "Growth DP_83VPs_KB5_consistent: 0.2823653925322485\n",
      "Growth iYS854_consistent: 1.3602249869877714\n"
     ]
    }
   ],
   "source": [
    "for model in consistent_models:\n",
    "    print(f\"Growth {model.id}: {model.slim_optimize()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Set default configurations\n",
    "\n",
    "This package specially focus on work within the nasal mikrobiome represented through the **SNM3** medium. Unfortunallty most metabolic are created for the gut thus often fail to achive growth on SNM3 as we can see here 3 of the 5 models do not achive growth."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "consistent_snm3_models =[]\n",
    "for model in consistent_models:\n",
    "    consistent_snm3_models.append(set_default_configs_and_snm3_medium(model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Growth CarveMe_SNM_gapfilled_model_consistent: -2.0804218484030174e-15\n",
      "Growth himodel_consistent: -2.0391293932942178e-14\n",
      "Growth Staphylococcus_epidermidis_ATCC_12228_consistent: 0.574625950079267\n",
      "Growth DP_83VPs_KB5_consistent: 4.55767014689217e-16\n",
      "Growth iYS854_consistent: 2.558694612613423\n"
     ]
    }
   ],
   "source": [
    "for model in consistent_snm3_models:\n",
    "    print(f\"Growth {model.id}: {model.slim_optimize()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gapfilling\n",
    "\n",
    "While not necessarily required for community modeling, it may be beneficial for analysis if the models can achive growth at their own. We implement two strategies:\n",
    "* Gapfill medium: From the perspective of a community we can see the medium as less strict, because different metabolites could be provided by other members of the community that are currently not modeled. Thus we can extend the medium by the minimimum number of metabolites such that the organism can grow.\n",
    "* Gapfill model: We can add reactions to the model such that it can grow on the given medium."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We need to add following metabolites to the medium: ['EX_fe3_e']\n",
      "Growth CarveMe_SNM_gapfilled_model_consistent: 1.2060771083081372\n",
      "We need to add following metabolites to the medium: ['EX_23cump_e', 'EX_2pglyc_e', 'EX_ade_e', 'EX_chtbs_e', 'EX_mso3_e', 'EX_skm_e']\n",
      "Growth himodel_consistent: 2.0940011524149797\n",
      "We need to add following metabolites to the medium: []\n",
      "Growth Staphylococcus_epidermidis_ATCC_12228_consistent: 0.574625950079267\n",
      "We need to add following metabolites to the medium: ['EX_ile__L_e', 'EX_met__L_e', 'EX_26dap__M_e']\n",
      "Growth DP_83VPs_KB5_consistent: 0.2823653925322478\n",
      "We need to add following metabolites to the medium: []\n",
      "Growth iYS854_consistent: 2.558694612613423\n"
     ]
    }
   ],
   "source": [
    "for model in consistent_snm3_models:\n",
    "    m2, extension = gapfill_medium(model)\n",
    "    print(f\"We need to add following metabolites to the medium: {extension}\")\n",
    "    print(f\"Growth {m2.id}: {m2.slim_optimize()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/mnt/c/Users/manug/OneDrive/Uni/HIWI/ncmw/ncmw/setup_models/setup.py:63: UserWarning: The model still has no growth... . We try an alternative\n",
      "  warn(\"The model still has no growth... . We try an alternative\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We need to add following reactions to the model: ['FE2tex', 'EX_fe2_e', 'FEROpp', 'O2tpp']\n",
      "Growth CarveMe_SNM_gapfilled_model_consistent: 1.2058013624004358\n",
      "We need to add following reactions to the model: ['SHK3Dr', 'PPM2']\n",
      "Growth himodel_consistent: 1.2794310343289401\n",
      "We need to add following reactions to the model: []\n",
      "Growth Staphylococcus_epidermidis_ATCC_12228_consistent: 0.5746259500762596\n",
      "We need to add following reactions to the model: ['ACHBS', 'AHSERL2', 'ASADi', 'ASPK', 'DHAD2', 'HSERTA', 'KARA2', 'UAAGMDt', 'EX_uaagmda_e', 'HSDy']\n",
      "Growth DP_83VPs_KB5_consistent: 0.30044661945216933\n",
      "We need to add following reactions to the model: []\n",
      "Growth iYS854_consistent: 2.5586946126133348\n"
     ]
    }
   ],
   "source": [
    "for model in consistent_snm3_models:\n",
    "    m2, extension = gapfill_model(model)\n",
    "    print(f\"We need to add following reactions to the model: {[e.id for e in extension]}\")\n",
    "    print(f\"Growth {m2.id}: {m2.slim_optimize()}\")"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "23f3bcbc5cf74df6a8e405c0ecedc4bc93aaf7bc724ad3e5b7081b59a0ba1ea9"
  },
  "kernelspec": {
   "display_name": "Python 3.8.5 64-bit ('base': conda)",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
